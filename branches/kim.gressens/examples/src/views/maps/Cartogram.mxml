<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" implements="birdeye.vis.interfaces.data.IExportableSVG"
	width="100%" height="100%"
	horizontalAlign="center" verticalAlign="middle"
	xmlns:coords="birdeye.vis.coords.*"
	xmlns:elements="birdeye.vis.elements.geometry.*"
	xmlns:trans="birdeye.vis.trans.projections.*"
	xmlns:scales="birdeye.vis.scales.*"
	xmlns:guides="birdeye.vis.guides.legend.*" creationComplete="init()" xmlns:axis="birdeye.vis.guides.axis.*">
<mx:Script>
		<![CDATA[
			import birdeye.vis.data.UtilSVG;
			import mx.controls.Alert;
			import birdeye.vis.data.DataItemLayout;
			import birdeye.vis.data.dictionaries.WorldRegionTypes;
			import birdeye.vis.data.dictionaries.WorldCountries;
			import birdeye.vis.trans.projections.Projection;
			import mx.collections.ArrayCollection;
			import com.degrafa.core.IGraphicsFill;
			import com.degrafa.paint.RadialGradientFill;
			import com.degrafa.paint.GradientStop;
			import birdeye.vis.source.kml.parser.KMLParser;
			import birdeye.vis.trans.modifiers.NoncontiguousCartogram;
			
			public function get svgData():String
			{
				return myMap.svgData;
			}

			[Bindable]
			public var dt:ArrayCollection = new ArrayCollection();
			public function init():void
			{
				var wc:WorldCountries = new WorldCountries();
				var countries:Array = wc.getCountriesListByRegion("World");
				var cartogram:NoncontiguousCartogram = new NoncontiguousCartogram();
				var countriesData:ArrayCollection = new ArrayCollection();
				for each (var country:String in countries)
				{
					var rdm:Number = Math.random() ;
					var a:Array;
					countriesData.addItem({
						country: country,
						poly: a = cartogram.resizeCountry(wc.getCountryPolygon(country),wc.getCountryCenter(country),rdm),
						center: wc.getCountryCenter(country),
						random: rdm * 100000
					});
				}

				dt = countriesData;
			}
			
			private function dtFunc(currDatatip:Object, dataFields:Array):String
			{
				var tt:String =  currDatatip.country;
				tt += "\n Center: " + currDatatip.center;
				tt += "\n Random data: " + currDatatip.random;
				return  tt;
			}
			
			private function colorFunction(dataValue:*, min:Number, max:Number, _size:Number):*
			{
				var fillGradients:Array;
				var alphaGradients:Array;
				var fill:com.degrafa.core.IGraphicsFill = new RadialGradientFill();

				var grStop:GradientStop = new GradientStop(0x005AFF)
				grStop.alpha = .7;
				var g:Array = new Array();
				g.push(grStop);

				grStop = new GradientStop(0x005AFF);
				grStop.alpha = .3;
				g.push(grStop);

				RadialGradientFill(fill).gradientStops = g;
			 	return fill;
			}
		]]>
	</mx:Script>
	
	
	
	<mx:XML id="polygonKml" source="data/worldmap.kml" />
	<mx:XML id="baryCenterKml" source="data/baryCenters.kml" />
	
	<mx:Button label="SVG export" click="(new FileReference()).save(UtilSVG.createSVG([myMap.svgData], parentApplication.width, parentApplication.height))"/>
	
	<mx:VBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" >
		<mx:Label text="Draggable countries ...."/>
    	<coords:Cartesian id="myMap" width="90%" height="90%" showDataTips="true" dataTipFunction="dtFunc">
    		<coords:transforms>
					<trans:Projection id="myProj" proj="Miller cylindrical" latScale="{lat}" longScale="{long}"/>
			</coords:transforms>
			<coords:scales>
 				<scales:Numeric id="lat" dataValues="{[-90,90]}" dataInterval="20"/>
 				<scales:Numeric id="long" dataValues="{[-180,180]}" dataInterval="20" />
 				<scales:Numeric id="col" f="colorFunction" />
			</coords:scales>
<!--			<coords:guides>
				<axis:Axis scale="{lat}" placement="right" colorStroke="0x999999" colorPointer="0xff0000" colorLabel="0xbbbbbb" />
				<axis:Axis scale="{long}" placement="top" colorStroke="0x999999" colorPointer="0xff0000" colorLabel="0xbbbbbb" />
			</coords:guides>
-->    		 <coords:elements>
    		 	<elements:PolygonElement 
    		 		colorStroke="0xffffff" draggableItems="true" dataProvider="{dt}" scale1="{long}" scale2="{lat}" polyDim="poly" colorScale="{col}" />
			 </coords:elements>
    	</coords:Cartesian>
    </mx:VBox>
	
</mx:VBox>
