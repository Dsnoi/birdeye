<?xml version="1.0" encoding="utf-8"?>
<mx:VBox
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:coords="birdeye.vis.coords.*"
	xmlns:elements="birdeye.vis.elements.geometry.*"
	xmlns:scales="birdeye.vis.scales.*"
	xmlns:graphs="birdeye.vis.trans.graphs.*"
	xmlns:util="util.*"
	backgroundColor="#3f3f3f">

	
	<mx:HBox horizontalAlign="center" width="100%">
		<mx:Button label="Generate tree" click="generateTree()"/>
		<mx:Button label="Generate graph" click="generateGraph()"/>
		<mx:CheckBox id="animate" label="animate" selected="{graphLayout.animate}" />
	</mx:HBox>
	
	<mx:VBox horizontalAlign="center" width="100%" height="100%">
		<coords:Cartesian id="graph" width="100%" height="100%">
			<coords:elements>
				<elements:EdgeElement id="edge" dimStart="start" dimEnd="end" node="{node}" dataProvider="{edges}"
									  colorFill="0xFF0000" colorStroke="0x999999" strokeWeight="2" />
									  
				<elements:NodeElement id="node" dimId="id" dimName="name" dataProvider="{nodes}"
									  colorFill="0x0000FF" alphaFill="1.0" strokeColor="0xFFFFFF" size="7" />
			</coords:elements>
			<coords:transforms>
				<graphs:GraphLayout
						startNodeId="1"
						id="graphLayout"
						layouter="{layouter}"
						applyToNode="{node}" applyToEdge="{edge}"
						animate="{animate.selected}"/>
			</coords:transforms>
		</coords:Cartesian>
	</mx:VBox>

	
	<mx:Script>
	<![CDATA[
		import birdeye.vis.trans.graphs.layout.ILayoutAlgorithm;
		[Bindable]
		public var nodes:ArrayCollection;
		[Bindable]
		public var edges:ArrayCollection;
	
		[Bindable]
		public var layouter:ILayoutAlgorithm;
		
		import mx.collections.ArrayCollection;
		
		public function generateGraph():void {
			const nodeSet:ArrayCollection = new ArrayCollection();
			const numNodes:int = int(Math.random() * 10 + 10); 
			for (var i:int = 0; i < numNodes; i++) {
				nodeSet.addItem({
					id: i + 1,
					name: (i + 1) + ". " + randomName() + " "
				});
			}
	
			const edgeSet:ArrayCollection = new ArrayCollection();
			const numEdges:int = int(Math.random() * 40 + 10);
			for (i = 0; i < numEdges; i++) {
				edgeSet.addItem({
					start: int(Math.random() * numNodes) + 1,
					end: int(Math.random() * numNodes) + 1
				});
			}
			
			edges = edgeSet;
			nodes = nodeSet;
		}
		
		
		
		protected var maxLevel:int = 3;
		protected var minChildren:int = 2;
		protected var maxChildren:int = 3;
		protected var maxId:int = 1000;
	
		public function generateTree():void {
			lastId = 1;
	
			const nodeSet:ArrayCollection = new ArrayCollection();
			const edgeSet:ArrayCollection = new ArrayCollection();
			
			nodeSet.addItem({
				id: lastId,
				name: lastId + ". " + randomName() + " "
			});
			recurse(nodeSet, edgeSet, lastId, 1);
			
			edges = edgeSet;
			nodes = nodeSet;
		}
	
		private var lastId:int;
		private function recurse(nodeSet:ArrayCollection, edgeSet:ArrayCollection, parentId:int, level:int):void {
			if (level > maxLevel) return;
			if (lastId >= maxId) return;
	
			const numNodes:int = Math.round(Math.random() * (maxChildren - minChildren)) + minChildren; 
			for (var i:int = 0; i < numNodes; i++) {
				var id:int = ++lastId; 
				nodeSet.addItem({
					id: id,
					name: id + ". " + randomName() + " "
				});
				edgeSet.addItem({
					start: parentId,
					end: id
				});
				recurse(nodeSet, edgeSet, id, level + 1);
			}
		}
	
		private function randomName():String {
			var name:String = "";
			for (var i:int = 0; i < 5; i++) {
				name += String.fromCharCode('A'.charCodeAt(0) + int(Math.random() * 26)); 
			}
			return name;
		}
	]]>
	</mx:Script>

</mx:VBox>
