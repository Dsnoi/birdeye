<?xml version="1.0" encoding="utf-8"?>
<!--
 * The MIT License
 *
 * Copyright (c) 2008
 * United Nations Office at Geneva
 * Center for Advanced Visual Analytics
 * http://cava.unog.ch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 -->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ravis="org.un.cava.birdeye.ravis.graphLayout.visual.*"
	creationComplete="initData();" width="100%" height="100%" 
	xmlns:visual="org.un.cava.birdeye.ravis.enhancedGraphLayout.visual.*" 
	xmlns:lc="org.un.cava.birdeye.ravis.components.ui.controls.layouterControls.*"
	xmlns:vc="org.un.cava.birdeye.ravis.components.ui.controls.vgraphControls.*"
	xmlns:ui="org.un.cava.birdeye.ravis.components.ui.*"
	xmlns:dp="org.un.cava.birdeye.ravis.components.ui.dataPresentation.*"
	xmlns:flexlib="http://code.google.com/p/flexlib/"
	backgroundGradientColors="[#333333,#999999]" layout="vertical"
	creationPolicy="all" xmlns:controls="org.un.cava.birdeye.ravis.enhancedGraphLayout.ui.controls.*">

	<mx:Script>
		<![CDATA[
			import mx.utils.ObjectUtil;
			import mx.controls.Alert;
			import org.un.cava.birdeye.ravis.assets.icons.EmbeddedIcons;
			import mx.binding.utils.BindingUtils;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.visual.nodeRenderers.EnhancedIconNodeRenderer;
			import org.un.cava.birdeye.ravis.components.renderers.nodes.IconNodeRenderer;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.visual.edgeRenderers.EdgeControlRenderer;
			import org.un.cava.birdeye.ravis.components.renderers.nodes.BaseNodeRenderer;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.event.VGEdgeEvent;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.event.VGNodeEvent;
			import org.un.cava.birdeye.ravis.graphLayout.layout.HierarchicalLayouter;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.visual.edgeRenderers.EdgeDrawer;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.visual.nodeRenderers.NodeLabelRenderer;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.visual.edgeRenderers.EdgeRenderer;
			import org.un.cava.birdeye.ravis.utils.TypeUtil;
			import org.un.cava.birdeye.ravis.enhancedGraphLayout.data.EnhancedGraph;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.FlowEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.FlowCurveEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedBalloonEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.layout.CircularLayouter;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.CircularEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedArrowEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.BaseEdgeRenderer;

			import org.un.cava.birdeye.ravis.graphLayout.data.INode;
			import org.un.cava.birdeye.ravis.graphLayout.data.IGraph;
			import org.un.cava.birdeye.ravis.graphLayout.data.Graph;			
			import org.un.cava.birdeye.ravis.graphLayout.visual.VisualNode;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualNode;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualGraph;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ILayoutAlgorithm;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ConcentricRadialLayouter;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.BaseEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.VisualGraph;			
			import org.un.cava.birdeye.ravis.components.renderers.nodes.RotatedRectNodeRenderer;
			
			// These are the item renderers
			import renderers.nodes.mxml.basicNodeRenderer;
			import renderers.edgelabels.mxml.basicEdgeLabelRenderer;

			/* 
			 * The following local variables hold various
			 * important object references
			 */

			// graph datastructure object
			private var graph:IGraph;
			// active layouter
			private var layouter:ILayoutAlgorithm;
			// edge renderer
			private var selectedEdgeRenderer:IEdgeRenderer;
			// root node to start with
			private var startRoot:IVisualNode;
			// this is used to display the number of visible items
			private var itemCount:int = 0;
			// important to ensure we are done with the main initialisation
			private var initDone:Boolean = false;
			
			/**
			 * event handler for HTTPService, does all the remaining required
			 * initialisation
			 * */
			private function initData():void {
				var defaultNodeDistanceTop:Number = 120;
				var defaultNodeDistanceLeft:Number = 30;								
				/* set the graph in the VGraph object, this automatically
				 * initializes the VGraph items */
				//graph = new EnhancedGraph("XMLAsDocsGraph",true, xmldata);
				
				graph = new EnhancedGraph("XMLAsDocsGraph",true);
				var vo:Object = TypeUtil.deserializeXMLString(xmldata);
				EnhancedGraph(graph).initFromVO(vo); 
				
				vgraph.graph = graph;
				/* set the default layouter type */
				layouter = new HierarchicalLayouter(vgraph);
				HierarchicalLayouter(layouter).orientation = HierarchicalLayouter.ORIENT_TOP_DOWN;
				vgraph.layouter = layouter;
				
				/* set autofit */
				layouter.autoFitEnabled = true;
				vgraph.edgeRenderer = new EdgeDrawer(vgraph.edgeDrawGraphics);
				vgraph.nodeLabelRenderer = new ClassFactory(NodeLabelRenderer);
				vgraph.edgeControlRenderer = new ClassFactory(EdgeControlRenderer);
				vgraph.itemRenderer = new ClassFactory(EnhancedIconNodeRenderer);
				vgraph.edgeLabelRenderer = new ClassFactory(EdgeRenderer);
				
				/* set the visibility limit options, default 2 */
				vgraph.maxVisibleDistance = 20;
		
				/* select a root node, most layouters requires a root node */
				startRoot = graph.nodeByStringId("1").vnode;
		
				/* set if edge labels should be displayed */
				vgraph.displayEdgeLabels = true;
				vgraph.displayNodeLabels = true;
				/* the following kicks it off .... */
				vgraph.currentRootVNode = startRoot;
		
				addEventListeners();
				initDone = true;
				vgraph.draw();
			}
			
			private function addEventListeners():void
			{
				//vgraph.addEventListener(VGNodeEvent.VG_NODE_CLICK, nodeEventHandler);
				vgraph.addEventListener(VGNodeEvent.VG_NODE_DOUBLE_CLICK, nodeEventHandler);
				/* vgraph.addEventListener(VGNodeEvent.VG_NODE_MOUSE_DOWN, nodeEventHandler);
				vgraph.addEventListener(VGNodeEvent.VG_NODE_MOUSE_UP, nodeEventHandler); */
				
				vgraph.addEventListener(VGEdgeEvent.VG_EDGE_CLICK, edgeEventHandler);
				//vgraph.addEventListener(VGEdgeEvent.VG_EDGE_DOUBLE_CLICK, edgeEventHandler);
				/* vgraph.addEventListener(VGEdgeEvent.VG_EDGE_MOUSE_DOWN, edgeEventHandler);
				vgraph.addEventListener(VGEdgeEvent.VG_EDGE_MOUSE_UP, edgeEventHandler); */
				
				/* vgraph.addEventListener(VGNodeEvent.VG_NODE_LABEL_CLICK, nodeLabelEventHandler);
				vgraph.addEventListener(VGNodeEvent.VG_NODE_LABEL_DOUBLE_CLICK, nodeLabelEventHandler);
				vgraph.addEventListener(VGNodeEvent.VG_NODE_LABEL_MOUSE_DOWN, nodeLabelEventHandler);
				vgraph.addEventListener(VGNodeEvent.VG_NODE_LABEL_MOUSE_UP, nodeLabelEventHandler); */
				
				/* vgraph.addEventListener(VGEdgeEvent.VG_EDGE_LABEL_CLICK, edgeEventHandler);
				vgraph.addEventListener(VGEdgeEvent.VG_EDGE_LABEL_DOUBLE_CLICK, edgeEventHandler);
				vgraph.addEventListener(VGEdgeEvent.VG_EDGE_LABEL_MOUSE_DOWN, edgeEventHandler);
				vgraph.addEventListener(VGEdgeEvent.VG_EDGE_LABEL_MOUSE_UP, edgeEventHandler); */
			}
		
			private function edgeEventHandler(event:VGEdgeEvent):void
			{
				var dataInfo:String
				if (event.edge.data is XML)
					dataInfo = event.edge.data.toXMLString();
				else
					dataInfo = ObjectUtil.toString(event.edge.data);
				Alert.show("EDGE EVENT: " + event.type + ", data = " + dataInfo)
			}
			
			private function nodeEventHandler(event:VGNodeEvent):void
			{
				if (vgraph.enableDefaultDoubleClick == false)
				{
					var node:INode = event.node;
					vgraph.setVisibleNodeWithRelated(node.vnode);
				}
			}
			
			private function edgeLabelEventHandler(event:VGEdgeEvent):void
			{
				trace("EDGE EVENT: " + event.type);
			}
			
			private function nodeLabelEventHandler(event:VGNodeEvent):void
			{
				trace("NODE EVENT: " + event.type);	
			}			
		]]>
	</mx:Script>					

	<mx:Style source="styles/main.css" />

	<mx:WipeLeft id="wipeLeft" duration="1000" />
	<mx:WipeRight id="wipeRight" duration="1000" />
	
	
	<mx:VBox width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" 
		paddingLeft="10" paddingRight="10" paddingTop="0" paddingBottom="0">
		
		<mx:VBox width="100%" height="100%" verticalGap="10" >
			<mx:ApplicationControlBar width="100%" height="85" >
				<mx:HBox width="100%" verticalAlign="middle" paddingLeft="5" paddingRight="5" >
					<mx:Image source="{EmbeddedIcons.ravisIcon}" />
					<mx:Label text="BIRDEYE: Enhanced RaVis Explorer" color="#FFFFFF" fontSize="16" />
				</mx:HBox>
			</mx:ApplicationControlBar>	
			
			<mx:HBox id="DivNavRB" width="100%" height="100%" paddingBottom="5" horizontalGap="5">
				<mx:HBox id="sideBar" width="300" height="100%" horizontalGap="0" >
					<ui:Grip id="navGrip"  
						width="17" height="100%" horizontalAlign="center"
						gripTip="Show/Hide Control Panel" />
					<mx:VBox id="NavContainerRB"
						horizontalScrollPolicy="off"
						verticalScrollPolicy="off"
						verticalAlign="middle"
						horizontalAlign="center"
						verticalGap="1"
						horizontalGap="0"
						width="100%"
						height="100%"
						hideEffect="{wipeLeft}"
						showEffect="{wipeRight}">
						<mx:Accordion id="leftAccordion"
							paddingBottom="5"
							paddingRight="5"
							paddingTop="5"
							paddingLeft="5"
							horizontalScrollPolicy="off"
							verticalScrollPolicy="off"
							width="100%"
							height="100%"
							creationPolicy="all" >
							<mx:Canvas id="visibilitycnvs"
								label="Controls"
								height="100%"
								width="100%"
								paddingBottom="5"
								horizontalScrollPolicy="off"
								verticalScrollPolicy="off" >
								<mx:VBox width="100%"
									height="100%"
									horizontalAlign="center"
									horizontalScrollPolicy="off"
									verticalScrollPolicy="off">
									<mx:Spacer height="3" />
		
									<flexlib:WindowShade
										id="layoutContainer"
										styleName="linkButtonWindowShade" 
		  								label="Layout"
		  								width="100%"
		  								opened="true"
		  								horizontalAlign="center"
		  								paddingBottom="5"
		  								>
										<mx:VBox
											width="99%"
											horizontalAlign="center"
											paddingLeft="5"
											paddingRight="5"
											paddingBottom="5"
											paddingTop="5"
											borderColor="#666666"
											borderThickness="1"
											cornerRadius="5"
											borderStyle="solid"
											backgroundColor="#CCCCCC"
											backgroundAlpha=".2" >
					
											<lc:HierLayoutControls id="myHierLC" vgraph="{vgraph}" />
										</mx:VBox>
									</flexlib:WindowShade>
									<flexlib:WindowShade
										id="operationContainer"
										styleName="linkButtonWindowShade" 
		  								label="Operation"
		  								width="100%"
		  								opened="true"
		  								horizontalAlign="center"
		  								paddingBottom="5"
		  								>
										<mx:VBox
											width="99%"
											horizontalAlign="center"
											paddingLeft="5"
											paddingRight="5"
											paddingBottom="5"
											paddingTop="5"
											borderColor="#666666"
											borderThickness="1"
											cornerRadius="5"
											borderStyle="solid"
											backgroundColor="#CCCCCC"
											backgroundAlpha=".2" >
											<mx:VBox
												width="97%"
												horizontalAlign="left"
												paddingLeft="5"
												paddingRight="5"
												paddingBottom="5"
												paddingTop="5"
												borderColor="#666666"
												borderThickness="1"
												cornerRadius="5"
												borderStyle="solid"
												backgroundColor="#CCCCCC"
												backgroundAlpha=".2">
												<controls:ToggleDragSubTree vgraph="{vgraph}" width="90%"/>
												<controls:ToggleNodeDoubleClick vgraph="{vgraph}" width="90%"/>
											</mx:VBox>
											
										</mx:VBox>
									</flexlib:WindowShade>
									<flexlib:WindowShade
										id="viewControlsContainer"
										styleName="linkButtonWindowShade" 
							  			label="View Controls"
							  			width="100%"
							  			opened="true"
							  			horizontalAlign="center"
							  			paddingBottom="5"
							  			>
							  			<mx:VBox
											width="97%"
											horizontalAlign="center"
											paddingLeft="5"
											paddingRight="5"
											paddingBottom="5"
											paddingTop="5"
											borderColor="#666666"
											borderThickness="1"
											cornerRadius="5"
											borderStyle="solid"
											backgroundColor="#CCCCCC"
											backgroundAlpha=".2" >
											<vc:ScaleControls id="mySCs" vgraph="{vgraph}" />
											<vc:DrawButton id="myDB" vgraph="{vgraph}" />
											<vc:FullRefreshButton
												id="myFRB"
												vgraph="{vgraph}"
												directional="true"
												xmlData="{xmldata}" />
										</mx:VBox>
									</flexlib:WindowShade>
								</mx:VBox>		
							</mx:Canvas>
						</mx:Accordion>
					</mx:VBox>		
				</mx:HBox>
		
				<!-- Graph Panel -->
				
				<mx:Canvas id="graphCnvs"
					borderStyle="solid"
					borderColor="#CCCCCC"
					backgroundColor="#FFFFFF"
					width="100%"
					height="100%"
					verticalScrollPolicy="off">		
				
					<visual:EnhancedVisualGraph id="vgraph" width="100%" height="100%" 
						paddingBottom="5" left="0" right="0" top="0" bottom="0"
						backgroundColor="#FFFFFF" alpha="1" enableDefaultDoubleClick="false"
						visibilityLimitActive="true"
						>
					</visual:EnhancedVisualGraph>
				</mx:Canvas>
				<!-- End of Graph Panel -->
			</mx:HBox>
		</mx:VBox>
	</mx:VBox>
	
	<mx:states>
		<mx:State name="showCntrlPanel">
			<mx:SetProperty target="{sideBar}" name="width" value="300" />
			<mx:SetStyle target="{DivNavRB}" name="horizontalGap" value="5" />
		</mx:State>        
		<mx:State name="hideCntrlPanel">
			<mx:SetProperty target="{sideBar}" name="width" value="17" />
			<mx:SetStyle target="{DivNavRB}" name="horizontalGap" value="0" />
		</mx:State>
	</mx:states>
	<mx:transitions>
		<mx:Transition fromState="*" toState="*">
			<mx:Resize target="{sideBar}" />
		</mx:Transition>
	</mx:transitions>

	<mx:XML id="xmldata" source="data/graph.xml" />

</mx:Application>