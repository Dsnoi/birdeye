<?xml version="1.0" encoding="utf-8"?>
<!--
* The MIT License
*
* Copyright (c) 2008
* United Nations Office at Geneva
* Center for Advanced Visual Analytics
* http://cava.unog.ch
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:ravis="org.un.cava.birdeye.ravis.graphLayout.visual.*"
    creationComplete="initData();" width="100%" height="100%" >
    
    <!--
    DEMO LEVEL 1:
    The purpose of this demo is to explain the basics for creating a simple graph which include:
    
    1.) Using an XML data source
    2.) Initiating a graph
    3.) Setting a layouter
    4.) Setting an edge renderer
    5.) Specifying a node renderer (basicNodeRenderer.mxml)
    -->
    
    <mx:Script>
        <![CDATA[
            import org.un.cava.birdeye.ravis.components.renderers.nodes.RotatedRectNodeRenderer;
            import org.un.cava.birdeye.ravis.graphLayout.data.Graph;
            import org.un.cava.birdeye.ravis.graphLayout.data.IGraph;
            import org.un.cava.birdeye.ravis.graphLayout.layout.CircularLayouter;
            import org.un.cava.birdeye.ravis.graphLayout.layout.ILayoutAlgorithm;
            import org.un.cava.birdeye.ravis.graphLayout.visual.IEdgeRenderer;
            import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualNode;
            import org.un.cava.birdeye.ravis.graphLayout.visual.VisualGraph;
            import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.BaseEdgeRenderer;
            
            import renderers.edgelabels.mxml.basicEdgeLabelRenderer;
            
            /* 
            * The following local variables hold various
            * important object references
            */
            
            // graph datastructure object
            private var graph:IGraph;
            // active layouter
            private var layouter:ILayoutAlgorithm;
            // edge renderer
            private var selectedEdgeRenderer:IEdgeRenderer;
            // root node to start with
            private var startRoot:IVisualNode;
            // this is used to display the number of visible items
            private var itemCount:int = 0;
            // important to ensure we are done with the main initialisation
            private var initDone:Boolean = false;
            
            /**
             * event handler for HTTPService, does all the remaining required
             * initialisation
             * */
            private function initData():void {
                
                /* create and init a graph object with the XML data */
                graph = new org.un.cava.birdeye.ravis.graphLayout.data.Graph("XMLAsDocsGraph",false,xmldata);
                
                /* set the graph in the VGraph object, this automatically
                * initializes the VGraph items; 
                * note: vgraph is the id of the mxml specified VisualGraph component */
                vgraph.graph = graph;
                
                /* set the default layouter type */
                //layouter = new ConcentricRadialLayouter(vgraph);
                layouter = new CircularLayouter(vgraph);
                vgraph.layouter = layouter;
                
                /* set autofit */
                layouter.autoFitEnabled = true;
                
                /* create and set an EdgeRenderer */
                vgraph.edgeRendererFactory = new ClassFactory( BaseEdgeRenderer );
                //vgraph.edgeRenderer = new FlowEdgeRenderer(vgraph.edgeDrawGraphics);
                
                /* set the visibility limit options, default 2 
                * a.k.a degrees of separation */
                vgraph.maxVisibleDistance = 2;
                
                /* select a root node, most layouters requires a root node
                * Note: Id 1 is referring to node id in the XML file */
                startRoot = graph.nodeByStringId("1").vnode;
                
                /* set if edge labels should be displayed */
                vgraph.displayEdgeLabels = false;
                
                /* the following kicks it off .... */
                vgraph.currentRootVNode = startRoot;
                initDone = true;
                vgraph.draw();
            }
        ]]>
    </mx:Script>					
    
    <!-- edgeLabelRenderer="renderers.edgelabels.mxml.basicEdgeLabelRenderer" -->
    
    <mx:Style source="styles/main.css" />
    <mx:XML id="xmldata" source="data/graph.xml" />	
    <mx:Panel id="main" title="Level 1..." width="100%" height="100%" 
        verticalAlign="middle" horizontalAlign="center" 
        borderColor="#CCCCCC" paddingBottom="5" horizontalGap="5">
        <mx:Canvas id="graphCnvs" width="100%" height="100%"  >		
            <ravis:VisualGraph id="vgraph" width="100%" height="100%" 
                left="0" right="0" top="0" bottom="5"
                backgroundColor="#FFFFFF" alpha="1"
                itemRenderer="org.un.cava.birdeye.ravis.components.renderers.nodes.RotatedRectNodeRenderer"
                edgeLabelRenderer="renderers.edgelabels.mxml.basicEdgeLabelRenderer"
                visibilityLimitActive="true"
                >
            </ravis:VisualGraph>
            <mx:Label text="Double Click Node to Traverse Graph" bottom="0" right="5" />
        </mx:Canvas>
    </mx:Panel>
</mx:Application>