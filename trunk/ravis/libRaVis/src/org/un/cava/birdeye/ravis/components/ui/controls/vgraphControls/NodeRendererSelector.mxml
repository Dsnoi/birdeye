<?xml version="1.0" encoding="utf-8"?>
<!--
 *
 * The MIT License
 *
 * Copyright (c) 2008
 * United Nations Office at Geneva
 * Center for Advanced Visual Analytics
 * http://cava.unog.ch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
-->
<mx:ComboBox xmlns:mx="http://www.adobe.com/2006/mxml"
	height="20"
	width="95%"
	color="#CCCCCC"
	prompt="Select node style."
	toolTip="Select the type of node labels."
	creationComplete="initData()"
	change="changeNodeRenderer()" >
	
	<mx:ArrayCollection id="nrvalues">
		<mx:String>Default</mx:String>
		<mx:String>Basic</mx:String>
		<mx:String>Basic+Effects</mx:String>
		<mx:String>SimpleCircle</mx:String>
		<mx:String>SimpleCircle+Effects</mx:String>
		<mx:String>Icons</mx:String>
		<mx:String>Rotated Rectangle</mx:String>
		<mx:String>Size by Value</mx:String>
		<mx:String>WFB</mx:String>
	</mx:ArrayCollection>
	
	<mx:Script>	
		<![CDATA[
			import mx.utils.ObjectUtil;
			import org.un.cava.birdeye.ravis.globals.GlobalParams;
			import org.un.cava.birdeye.ravis.globals.GlobalParamsVGraph;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualGraph;
			import org.un.cava.birdeye.ravis.components.renderers.nodes.BaseNodeRenderer;
			import org.un.cava.birdeye.ravis.components.renderers.nodes.DefaultNodeRenderer;
			import org.un.cava.birdeye.ravis.components.renderers.nodes.EffectBaseNodeRenderer;
			import org.un.cava.birdeye.ravis.components.renderers.nodes.FilteredSimpleCircleNodeRenderer;
			import org.un.cava.birdeye.ravis.components.renderers.nodes.IconNodeRenderer;
			import org.un.cava.birdeye.ravis.components.renderers.nodes.RotatedRectNodeRenderer;
			import org.un.cava.birdeye.ravis.components.renderers.nodes.SimpleCircleNodeRenderer;
			import org.un.cava.birdeye.ravis.components.renderers.nodes.SizeByValueNodeRenderer;
			import org.un.cava.birdeye.ravis.components.renderers.nodes.WFBNodeRenderer;
			
			/**
			 * When enabling or disabling this component, we also
			 * perform some specific tasks.
			 * Attention do completely disable interaction
			 * there is also the mouseEnabled property.
			 * 
			 * @inheritDoc
			 * */
			override public function set enabled(e:Boolean):void {
				if(e == true) {
					this.setStyle("color",0x000000);
					this.alpha=1;
				} else {
					this.setStyle("color",0xCCCCCC);
					this.alpha=0.3;
				}
				/* call superclass (ComboBox) */
				super.enabled = e;
			}

			/**
			 * Set the selected EdgeLabelRenderer.
			 * */
			public function changeNodeRenderer():void {
				
				var nr:String;
				var vgraph:IVisualGraph = GlobalParams.vgraph;
				
				/* get the currently selected orientation */
				nr = this.selectedItem as String;
					
				if(vgraph != null) {
					switch(nr) {
						case "Default":
							vgraph.itemRenderer = new ClassFactory(DefaultNodeRenderer);
							break;
						case "Basic":
							vgraph.itemRenderer = new ClassFactory(BaseNodeRenderer);
							break;
						case "Basic+Effects":
							vgraph.itemRenderer = new ClassFactory(EffectBaseNodeRenderer);
							break;
						case "SimpleCircle":
							vgraph.itemRenderer = new ClassFactory(SimpleCircleNodeRenderer);
							break;
						case "SimpleCircle+Effects":
							vgraph.itemRenderer = new ClassFactory(FilteredSimpleCircleNodeRenderer);
							break;
						case "Icons":
							vgraph.itemRenderer = new ClassFactory(IconNodeRenderer);
							break;
						case "Rotated Rectangle":
							vgraph.itemRenderer = new ClassFactory(RotatedRectNodeRenderer);
							break;
						case "Size by Value":
							vgraph.itemRenderer = new ClassFactory(SizeByValueNodeRenderer);
							break;
						case "WFB":
							vgraph.itemRenderer = new ClassFactory(WFBNodeRenderer);
							break;
						
						default:
							trace("Illegal NodeRenderer selected:"+nr);
							vgraph.itemRenderer = new ClassFactory(DefaultNodeRenderer);
							break;
					}
					vgraph.draw();
				} else {
					trace("NodeRenderer NOT CHANGED, no valid vgraph in GlobalParams, not redrawing!");
				}
			}	
			
			/**
			 * Refresh the selector with the current EdgeLabelRenderer.
			 * */
			public function refreshSelector():void {
				
				var vgraph:IVisualGraph = GlobalParams.vgraph;
	
				if(vgraph != null) {
					switch(ObjectUtil.getClassInfo(vgraph.edgeLabelRenderer).name) {

						case "DefaultNodeRenderer":
							this.selectedIndex = 0;
							break;
						case "BaseNodeRenderer":
							this.selectedIndex = 1;
							break;
						case "EffectsBaseNodeRenderer":
							this.selectedIndex = 2;
							break;
						case "SimpleCircleNodeRenderer":
							this.selectedIndex = 3;
							break;
						case "FilteredSimpleCircleNodeRenderer":
							this.selectedIndex = 4;
							break;
						case "IconNodeRenderer":
							this.selectedIndex = 5;
							break;
						case "RotatedRectNodeRenderer":
							this.selectedIndex = 6;
							break;
						case "SizeByValueNodeRenderer":
							this.selectedIndex = 7;
							break;
						case "WFBNodeRenderer":
							this.selectedIndex = 8;
							break;
						default:
							trace("Illegal NodeLabelRenderer received:"+
								ObjectUtil.getClassInfo(vgraph.edgeLabelRenderer).name);
							break;
					}
				} else {
					trace("NodeRenderer NOT refreshed, no valid vgraph in GlobalParams!");
				}
			}
			
			/**
			 * initialise the selection data.
			 * It is a bit unclear, why this seems to be necessary.
			 * */
			private function initData():void {
				this.dataProvider = nrvalues;
				/* register ourselves */
				GlobalParamsVGraph.nodeRendererSelectorControl = this;
			}
		]]>
	</mx:Script>
</mx:ComboBox>
